import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Checkbox } from '@/components/ui/checkbox'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Clock, TrendingUp, BarChart3, Calendar, Target, Zap } from 'lucide-react'

type ConfluenceCategory = {
  id: string
  name: string
  icon: React.ElementType
  options: { id: string; label: string; description: string }[]
}

const confluenceCategories: ConfluenceCategory[] = [
  {
    id: 'ema',
    name: 'EMA Levels',
    icon: TrendingUp,
    options: [
      { id: '13-ema-respect', label: '13 EMA Respect', description: 'Both legs respect 13 EMA' },
      { id: '13-ema-tap', label: '13 EMA Tap', description: 'First leg taps but does not break' },
      { id: '50-ema-bounce', label: '50 EMA Bounce', description: 'Pullback to 50 EMA after trend' },
      { id: 'no-touch-13', label: 'No Touch 13 EMA', description: 'Leg remains above/below 13 EMA' },
    ]
  },
  {
    id: 'session',
    name: 'Session Timing',
    icon: Clock,
    options: [
      { id: 'asian-high-low', label: 'Asian High/Low', description: 'At session highs or lows' },
      { id: 'london-open', label: 'London Open', description: '2:00-9:00 AM EST' },
      { id: 'ny-open', label: 'New York Open', description: '9:30 AM - 5:00 PM EST' },
      { id: 'brinks-timing', label: 'Brinks Timing', description: '9:45 PM, 3:45 AM, 9:45 AM EST' },
    ]
  },
  {
    id: 'patterns',
    name: 'Candlestick Patterns',
    icon: BarChart3,
    options: [
      { id: 'railroad-tracks', label: 'Railroad Tracks', description: 'Strong reversal pattern' },
      { id: 'morning-star', label: 'Morning/Evening Star', description: 'Three-candle reversal' },
      { id: 'pin-hammer', label: 'Pin Bar/Hammer', description: 'Rejection candle' },
      { id: 'engulfment', label: 'Engulfment', description: 'Bullish/bearish engulfment' },
    ]
  },
  {
    id: 'levels',
    name: 'Key Levels',
    icon: Target,
    options: [
      { id: 'pdh-pdl', label: 'PDH/PDL', description: 'Previous day high/low' },
      { id: 'adr-levels', label: 'ADR Levels', description: 'Average daily range boundaries' },
      { id: 'session-hol', label: 'Session HOL', description: 'Session high of low' },
      { id: 'liquidity-sweep', label: 'Liquidity Sweep', description: 'Stop hunt before reversal' },
    ]
  },
  {
    id: 'structure',
    name: 'Market Structure',
    icon: Zap,
    options: [
      { id: 'trend-continuation', label: 'Trend Continuation', description: 'Following major trend' },
      { id: 'reversal-setup', label: 'Reversal Setup', description: 'Counter-trend opportunity' },
      { id: 'consolidation', label: 'Consolidation Break', description: 'Range breakout' },
      { id: 'multi-timeframe', label: 'Multi-TF Align', description: 'Higher TF confirmation' },
    ]
  }
]

interface ConfluenceSelectorProps {
  selectedConfluences: string[]
  onConfluenceChange: (confluences: string[]) => void
  autoGeneratedNotes: string
  onNotesChange: (notes: string) => void
}

export function ConfluenceSelector({ 
  selectedConfluences, 
  onConfluenceChange, 
  autoGeneratedNotes,
  onNotesChange 
}: ConfluenceSelectorProps) {
  const [expandedCategory, setExpandedCategory] = useState<string | null>('ema')

  const handleConfluenceToggle = (confluenceId: string) => {
    const newConfluences = selectedConfluences.includes(confluenceId)
      ? selectedConfluences.filter(id => id !== confluenceId)
      : [...selectedConfluences, confluenceId]
    
    onConfluenceChange(newConfluences)
    console.log('Confluence selection changed:', confluenceId)
  }

  const getConfluenceLabel = (confluenceId: string) => {
    for (const category of confluenceCategories) {
      const option = category.options.find(opt => opt.id === confluenceId)
      if (option) return option.label
    }
    return confluenceId
  }

  return (
    <div className="space-y-4">
      {/* Selected Confluences Summary */}
      {selectedConfluences.length > 0 && (
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Selected Confluences</CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <div className="flex flex-wrap gap-2">
              {selectedConfluences.map(confluenceId => (
                <Badge 
                  key={confluenceId} 
                  variant="default" 
                  className="text-xs"
                  data-testid={`selected-confluence-${confluenceId}`}
                >
                  {getConfluenceLabel(confluenceId)}
                </Badge>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Confluence Categories */}
      <div className="space-y-3">
        {confluenceCategories.map(category => {
          const categorySelections = selectedConfluences.filter(id => 
            category.options.some(opt => opt.id === id)
          )
          
          return (
            <Card key={category.id} className="">
              <CardHeader 
                className="pb-3 cursor-pointer hover-elevate" 
                onClick={() => setExpandedCategory(
                  expandedCategory === category.id ? null : category.id
                )}
                data-testid={`category-header-${category.id}`}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <category.icon className="h-4 w-4 text-primary" />
                    <CardTitle className="text-sm font-medium">{category.name}</CardTitle>
                    {categorySelections.length > 0 && (
                      <Badge variant="secondary" className="text-xs ml-2">
                        {categorySelections.length}
                      </Badge>
                    )}
                  </div>
                </div>
              </CardHeader>
              
              {expandedCategory === category.id && (
                <CardContent className="pt-0">
                  <div className="space-y-3">
                    {category.options.map(option => (
                      <div key={option.id} className="flex items-start space-x-2">
                        <Checkbox
                          id={option.id}
                          checked={selectedConfluences.includes(option.id)}
                          onCheckedChange={() => handleConfluenceToggle(option.id)}
                          data-testid={`checkbox-${option.id}`}
                        />
                        <div className="flex-1 space-y-1">
                          <label 
                            htmlFor={option.id}
                            className="text-sm font-medium cursor-pointer"
                          >
                            {option.label}
                          </label>
                          <p className="text-xs text-muted-foreground">
                            {option.description}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              )}
            </Card>
          )
        })}
      </div>

      {/* Auto-generated Notes */}
      {autoGeneratedNotes && (
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-sm font-medium">Generated Analysis Notes</CardTitle>
          </CardHeader>
          <CardContent className="pt-0">
            <Textarea
              value={autoGeneratedNotes}
              onChange={(e) => onNotesChange(e.target.value)}
              placeholder="Analysis notes will be generated based on selected confluences..."
              className="min-h-24 resize-none"
              data-testid="textarea-notes"
            />
            <p className="text-xs text-muted-foreground mt-2">
              Notes are automatically generated based on your confluence selections and can be edited.
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  )
}